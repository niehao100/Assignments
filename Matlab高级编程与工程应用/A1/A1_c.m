function A1_c()
    % 该函数生成一个GUI，可以选择调子、乐器、高中低音、音符和时长
    % 为了避免可能的乱码，程序全部使用英文
    close all;clear all;clc; 
    screen_size = get(0,'ScreenSize');  % 获取屏幕大小，用于居中窗口
    init_pos = screen_size(3:4);
    init_width = 260;   % 预设好窗口大小，不可改变
    init_height = 420;
    init_pos(1) = (init_pos(1)-init_width)/2;
    init_pos(2) = (init_pos(2)-init_height)/2;
    handle_main = figure('name','Generate Tone',...
        'menubar','none','numbertitle','off',...
        'Resize','off',...  % 大小不可改变
        'position',[init_pos init_width init_height]);

    current_size = get(handle_main,'Position'); % 计算各个控件的相对位置

    handle_scale_label=uicontrol('style','text',... 
        'String','Select a scale:',...  %选择调子
        'BackgroundColor',get(handle_main,'Color'),...
        'HorizontalAlignment','left',...
        'Tag','ScaleLabel',...
        'Position',[20 current_size(4)-44 120 20]);
    handle_scale=uicontrol('style','popupmenu',...
        'String',{'C Major Scale';'F Major Scale'},...  %　C大调 F大调
        'Tag','Scale',...
        'Callback',@set_status,...  % 回调函数全部为这一个，见后
        'TooltipString','Select a scale',...
        'Value',1,...
        'Position',[140 current_size(4)-40 100 20]);

    instrument_value=1;
    handle_instrument_label=uicontrol('style','text',...
        'String','Select an instrument:',...・% 选择乐器
        'BackgroundColor',get(handle_main,'Color'),...
        'HorizontalAlignment','left',...
        'Tag','InstrumentLabel',...
        'Position',[20 current_size(4)-85 120 20]);
    handle_instrument=uicontrol('style','popupmenu',...
        'string',{'Tuning fork';'Organ';'Guitar'},...   % 音叉即没有谐波
        'position',[140 current_size(4)-80 100 20],...  % 风琴采用题给参数
        'TooltipString','Select an instrument',...  % 吉他采用最终得到的谐波信息
        'Value',1,...
        'Callback',@set_status,...
        'Tag','Instrument');
    tune_value=1;
    handle_tune_label=uicontrol('style','text',...
        'String','Add # or b or not:',...   % 可选高中低音
        'BackgroundColor',get(handle_main,'Color'),...
        'HorizontalAlignment','left',...
        'Tag','TuneLabel',...
        'Position',[20 current_size(4)-125 120 20]);
    handle_tune=uicontrol('style','popupmenu',...
        'string',{'#x8';'-';'bx8'},...
        'position',[140 current_size(4)-120 100 20],...
        'TooltipString','Add a sharp or flat or not',...
        'Value',2,...
        'Callback',@set_status,...
        'Tag','Tune');
    tone_value=1;
    handle_tone_label=uicontrol('style','text',...
        'String','Select a tone:',...   % 选择do re mi……
        'BackgroundColor',get(handle_main,'Color'),...
        'HorizontalAlignment','left',...
        'Tag','ToneLabel',...
        'Position',[20 current_size(4)-165 120 20]);
    handle_tone=uicontrol('style','popupmenu',...
        'string',[1:7],...
        'position',[140 current_size(4)-160 100 20],...
        'TooltipString','Select a tone',...
        'Value',1,...
        'Callback',@set_status,...
        'tag','Tone');
    time_value=1;
    handle_time_label=uicontrol('style','text',...
        'String','Lasting time:1s',...  % 时间可选0.25s~2s，默认1s
        'BackgroundColor',get(handle_main,'Color'),...
        'HorizontalAlignment','left',...
        'Tag','TimeLabel',...
        'Position',[20 current_size(4)-205 120 20]);
    handle_time=uicontrol('style','slider',...
        'String','Adjust last time',...
        'Min',0.25,'Max',2,'Value',1,...
        'SliderStep',[1/14 1/7],...
        'position',[140 current_size(4)-200 100 20],...
        'TooltipString','Adjust last time',...
        'Value',1,...
        'Callback',@set_status,...
        'Tag','Time');

    handle_status_label=uicontrol('style','text',...    % 显示当前设定信息
        'String',sprintf('C major scale 1:261.626Hz\nLasts 1s like tuning fork.'),...
        'FontSize',12,...
        'HorizontalAlignment','center',...
        'BackgroundColor',get(handle_main,'Color'),...
        'Tag','StatusLabel',...
        'Position',[20 150 220 50]);

    handle_play = uicontrol('Style','pushbutton',...    % 触发按钮
        'String','DO IT',...
        'FontSize',60,...
        'HorizontalAlignment','center',...
        'CallBack',@play,...
        'Position',[20 20 220 130]);
end
function play(handles,event)    % 播放回调函数
    for h = get(get(handles,'Parent'),'Children')'  % 这一循环利用父句柄寻找各个选择器的句柄，用于获取值
        tag = get(h,'Tag');
        if strcmp(tag,'Time')
            handle_time = handle(h);
        elseif strcmp(tag,'Tone')
            handle_tone = h;
        elseif strcmp(tag,'Tune')
            handle_tune = h;
        elseif strcmp(tag,'Instrument')
            handle_instrument = h;
        elseif strcmp(tag,'Scale')
            handle_scale = h;
        end
    end
    instrument = get(handle_instrument,'String');   % 乐器名称（们）
    instrument = instrument(get(handle_instrument,'Value'));    % 得到当前的乐器
    tune = get(handle_tune,'Value'); 
    scale = get(handle_scale,'Value');
    if(scale==1)
        scale='C major scale ';
        basic=220*2^(3/12); %1=C1 设定基准频率
    else
        scale='F major scale ';
        basic=220*2^(8/12); %1=F1
    end
    multiplier = [0;2;4;5;7;9;11];  % 按音符分布规律设定的乘子
    frequency = basic*2^(multiplier(get(handle_tone,'Value'))/12);  % 计算出频率
    if(tune==1)
        tune='(#)';
        frequency = frequency*2;    % 有高低音则×2或÷2
    elseif(tune==2)
        tune='';
    else
        tune='(b)';
        frequency = frequency/2;
    end
    time = get(handle_time,'Value');
    rise_time=1/9;
    set_time=1/18;
    disappear_time=1/6;
    FS = 44100;
    if strcmp(instrument,'Tuning fork') % 根据乐器不同调用不同函数
        sound(AddDecay(GenerateTone(frequency,time,FS),...
            rise_time, set_time,disappear_time),FS);
    elseif strcmp(instrument,'Organ')
        sound(AddDecay(GenerateToneWithHarmonic(frequency,time,FS),...
            rise_time, set_time,disappear_time),FS);
    else strcmp(instrument,'Guitar')
        sound(AddDecay(GenerateToneMoreLikeGuitar(frequency,time,FS),...
            rise_time, set_time,disappear_time),FS);
    end
end
function set_status(handles,event)
    for h = get(get(handles,'Parent'),'Children')'
        tag = get(h,'Tag');
        if strcmp(tag,'Time')
            handle_time = handle(h);
        elseif strcmp(tag,'Tone')
            handle_tone = h;
        elseif strcmp(tag,'Tune')
            handle_tune = h;
        elseif strcmp(tag,'Instrument')
            handle_instrument = h;
        elseif strcmp(tag,'Scale')
            handle_scale = h;
        end
    end
    for h = get(get(handles,'Parent'),'Children')'% 这个循环利用父句柄获取各个标签的句柄，用于改变标签内容
        tag = get(h,'Tag');
        if strcmp(tag,'StatusLabel')
            instrument = get(handle_instrument,'String');
            tune = get(handle_tune,'Value');
            scale = get(handle_scale,'Value');
            if(scale==1)
                scale='C major scale ';
                basic=220*2^(3/12); %1=C1
            else
                scale='F major scale ';
                basic=220*2^(8/12); %1=F1
            end
            multiplier = [0;2;4;5;7;9;11];
            frequency = basic*2^(multiplier(get(handle_tone,'Value'))/12);
            if(tune==1)
                tune='(#)';
                frequency = frequency*2;
            elseif(tune==2)
                tune='';
            else
                tune='(b)';
                frequency = frequency/2;
            end
            set(h,'String',...
                sprintf('%s%d%s:%gHz\nLasts %gs like %s.',...
                    scale,...
                    get(handle_tone,'Value'),...
                    tune,...
                    frequency,...
                    get(handle_time,'Value'),...
                    lower(instrument{get(handle_instrument,'Value')})));
        elseif strcmp(tag,'TimeLabel')
            set(h,'String',sprintf('Lasting time:%gs',get(handle_time,'Value')));
        end
    end
end